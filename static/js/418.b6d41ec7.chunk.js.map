{"version":3,"file":"static/js/418.b6d41ec7.chunk.js","mappings":"wLAQMA,EAAyB,SAACC,GAC5B,IAAMC,EAAYC,OAAOF,EAAI,GAAGG,OAChC,OAAO,OAAIC,MAAMJ,GAAKK,QACjBC,KAAI,SAAAC,GAAG,OAAIL,OAAOK,MAClBD,KAAI,SAAAE,GAAG,MAAI,IAAIC,OAAOR,EAAYO,EAAIL,QAAUK,MASnDE,EAAwB,SAACC,EAASC,EAAWC,GAArB,OAC1B,OAAIF,GAASG,QAAO,SAAAP,GAAG,OAG3B,SAAwBQ,EAAMC,GAE1B,IADA,IAAIC,EAAM,CAAC,EAAG,GACLC,EAAI,EAAGA,EAAIF,EAAKb,OAAQe,IAC3BH,EAAKI,QAAQH,EAAKE,KAAO,GAAGD,EAAI,KAChCF,EAAKG,KAAOF,EAAKE,IAAID,EAAI,KAE/B,OAAOA,EAAIG,KAAK,IARZC,CAAeT,EAAWL,KAASM,MAW3C,IAAMS,EAAc,CAChB,KAAM,KAAM,KAAM,KAAM,KACxB,KAAM,KAAM,KAAM,KAClB,KAAM,KAAM,KACZ,MAkBJ,SAASC,EAAeC,EAAOP,GAC3B,GAAIO,EAAMrB,OAAQ,CACd,IAAIsB,GA5CkBzB,EA4CY,KAAD,IAAC,GAAI,GA3C1CD,EAAuBC,GAClBc,QAAO,SAAAN,GAAG,OAEuD,IAFnDA,EAAIkB,MAAM,IACpBZ,QAAO,SAACa,EAAET,GAAH,OACHV,EAAIoB,MAAM,EAAEV,GAAKV,EAAIoB,MAAMV,EAAE,IAAIW,SAASF,MAAIxB,WA6CvD,OAJAqB,EAAMM,SAAQ,SAACC,EAAGb,GACdO,EAASf,EAAsBe,EAAQM,EAAGd,EAAIC,IAC9Cc,QAAQC,IAAIF,EAAGd,EAAIC,OApBf,SAACO,GACb,IAAMS,EAASnC,EAAuB,KAAD,IAAC,GAAI,IACpCoC,EAAWD,EAAO5B,KAAI,SAAAyB,GAAC,OACzBK,KAAKpC,IAAL,MAAAoC,MAAI,OAAQd,EAAYhB,KAAI,SAAA+B,GAAC,OACzB3B,EAAsBe,EAAQM,EAAGM,GAAGlC,eAEtCmC,EAAWF,KAAKG,IAAL,MAAAH,MAAI,OAAQD,IACvBK,EAAgBN,EACjBpB,QAAO,SAACN,EAAKU,GAAN,OAAYiB,EAASjB,KAAOoB,KACnCxB,QAAO,SAAAN,GAAG,OAAIiB,EAAOI,SAASrB,MACnC,OAAQgC,EAAcrC,OAChBqC,EAAc,GACdN,EAAOC,EAAShB,QAAQmB,IAUnBG,CAAQhB,GAEf,OAjEW,SAACjB,GAAD,IAAMkC,EAAN,uDAAa,EAAb,OACflC,EAAIkB,MAAM,IACLpB,KAAI,SAACqC,GAAD,MAAQ,CAAEC,KAAMR,KAAKS,SAAUC,MAAOH,MAC1CC,MAAK,SAACD,EAAGI,GAAJ,OAAUJ,EAAEC,KAAOG,EAAEH,QAC1BtC,KAAI,SAACqC,GAAD,OAAOA,EAAEG,SACb1B,KAAK,IACLQ,OAAOc,GA2DDM,CAAW,aAAc,GAAGvC,OAAO,GAnDrB,IAACT,EAuDvB,SAASiD,EAAMC,GAIrB,MAAM,UAAN,OAAiB3B,EAAe,CAAC,OAAQ,QAAS,CAAC,KAAM","sources":["components/worker.js"],"sourcesContent":["const uniqRndStr = (str, size = 4) => \r\n    str.split(\"\")\r\n        .map((a) => ({ sort: Math.random(), value: a }))\r\n        .sort((a, b) => a.sort - b.sort)\r\n        .map((a) => a.value)\r\n        .join(\"\")\r\n        .slice(-size);\r\n\r\nconst createArrayWithRepeats = (max) => {\r\n    const maxLength = String(max-1).length;\r\n    return [...Array(max).keys()]\r\n        .map(num => String(num))\r\n        .map(str => '0'.repeat(maxLength - str.length) + str);  \r\n}\r\nconst createArrayNoRepeats = (max) =>\r\n    createArrayWithRepeats(max)\r\n        .filter(str => str.split('')\r\n            .filter((d,i) => \r\n                (str.slice(0,i) + str.slice(i+1)).includes(d)).length === 0\r\n        )\r\n\r\nconst findArrOfLegalGuesses = (prevArr, guessLast, resLast) =>\r\n    [...prevArr].filter(num => \r\n        calcDigitMatch(guessLast, num) === resLast);\r\n\r\nfunction calcDigitMatch(str1, str2) {\r\n    let res = [0, 0];\r\n    for (let i = 0; i < str2.length; i++) {\r\n      if (str1.indexOf(str2[i]) >= 0) res[0]++;\r\n      if (str1[i] === str2[i]) res[1]++;\r\n    }\r\n    return res.join('');\r\n  }\r\n\r\nconst PossibleRes = [\r\n    '00', '10', '20', '30', '40',\r\n    '11', '21', '31', '41',\r\n    '22', '32', '42', \r\n    '33'\r\n];\r\n\r\nconst minimax = (resArr) => {\r\n    const arrAll = createArrayWithRepeats(10**4);\r\n    const arrOfMax = arrAll.map(g => \r\n        Math.max(...PossibleRes.map(r => \r\n            findArrOfLegalGuesses(resArr, g, r).length))\r\n    );\r\n    const minOfArr = Math.min(...arrOfMax);\r\n    const newGuessArray = arrAll\r\n        .filter((str, i) => arrOfMax[i] === minOfArr )\r\n        .filter(str => resArr.includes(str));\r\n    return (newGuessArray.length) \r\n        ? newGuessArray[0] \r\n        : arrAll[arrOfMax.indexOf(minOfArr)];\r\n}\r\n\r\nfunction calcKnuthGuess(guess, res) {\r\n    if (guess.length) {\r\n        let resArr = createArrayNoRepeats(10**4);\r\n        guess.forEach((g, i) => {\r\n            resArr = findArrOfLegalGuesses(resArr, g, res[i])\r\n            console.log(g, res[i]);\r\n        })\r\n        return minimax(resArr);\r\n    } else {\r\n        return uniqRndStr('0123456789', 2).repeat(2);\r\n    }\r\n}\r\n\r\nexport function hello(name) {\r\n    // let i = 0;\r\n    // while (i < 100000000) \r\n    //     i++;\r\n return `Hello, ${calcKnuthGuess(['0011', '2233'], ['00', '22'])}`;\r\n}"],"names":["createArrayWithRepeats","max","maxLength","String","length","Array","keys","map","num","str","repeat","findArrOfLegalGuesses","prevArr","guessLast","resLast","filter","str1","str2","res","i","indexOf","join","calcDigitMatch","PossibleRes","calcKnuthGuess","guess","resArr","split","d","slice","includes","forEach","g","console","log","arrAll","arrOfMax","Math","r","minOfArr","min","newGuessArray","minimax","size","a","sort","random","value","b","uniqRndStr","hello","name"],"sourceRoot":""}